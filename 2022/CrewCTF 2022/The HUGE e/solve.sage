from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes, inverse, isPrime
from functools import reduce

p = 127557933868274766492781168166651795645253551106939814103375361345423596703884421796150924794852741931334746816404778765897684777811408386179315837751682393250322682273488477810275794941270780027115435485813413822503016999058941190903932883823
e1 = 219560036291700924162367491740680392841
e2 = 325829142086458078752836113369745585569
e3 = 237262361171684477270779152881433264701
c = 962976093858853504877937799237367527464560456536071770645193845048591657714868645727169308285896910567283470660044952959089092802768837038911347652160892917850466319249036343642773207046774240176141525105555149800395040339351956120433647613

p_minus_1_factors = [x for (x, m) in factor(p - 1) for _ in range(m)]
assert reduce((lambda x, y: x * y), p_minus_1_factors) == p - 1

e_mod_f = []
for f in p_minus_1_factors:
    phi = euler_phi(f)
    e_mod_f.append(power_mod(e1, power_mod(e2, e3, phi), f))

e = crt(e_mod_f, p_minus_1_factors)
d = inverse(e, p - 1)
m = power_mod(c, d, p)

flag = long_to_bytes(m).decode()
assert flag == 'crew{7hi5_1s_4_5ma11er_numb3r_7han_7h3_Gr4ham_numb3r}'
print(flag)
